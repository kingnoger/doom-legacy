// Emacs style mode select   -*- C++ -*- 
//-----------------------------------------------------------------------------
//
// $Id$
//
// Copyright (C) 1993-1996 by id Software, Inc.
// Copyright (C) 1998-2004 by DooM Legacy Team.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
//
// $Log$
// Revision 1.11  2004/11/28 18:02:23  smite-meister
// RPCs finally work!
//
// Revision 1.10  2004/11/09 20:38:52  smite-meister
// added packing to I/O structs
//
// Revision 1.8  2004/08/14 16:28:38  smite-meister
// removed libtnl.a
//
// Revision 1.6  2003/04/19 17:38:47  smite-meister
// SNDSEQ support, tools, linedef system...
//
// Revision 1.5  2003/04/14 08:58:30  smite-meister
// Hexen maps load.
//
// Revision 1.4  2003/03/23 14:24:13  smite-meister
// Polyobjects, MD3 models
//
// Revision 1.3  2003/03/08 16:07:14  smite-meister
// Lots of stuff. Sprite cache. Movement+friction fix.
//
// Revision 1.2  2003/02/23 22:49:31  smite-meister
// FS is back! L2 cache works.
//
// Revision 1.1.1.1  2002/11/16 14:18:22  hurdler
// Initial C++ version of Doom Legacy
//
//-----------------------------------------------------------------------------

/// \file
/// \brief External data structures for Doom/Hexen maps.
///
/// The following data structures define the persistent format
/// used in the lumps of the WAD files.
/// The data is transferred into (different) runtime structs during
/// map setup. The corresponding runtime structs are defined in r_defs.h.

#ifndef doomdata_h
#define doomdata_h 1

// The most basic types we use, portability.
#include "doomtype.h"

// NOTE: Currently we assume that int = 32 bits, short = 16 bits.


/// Lump order in a map WAD: each map needs a couple of lumps
/// to provide a complete scene geometry description.
enum map_lump_e
{
  LUMP_LABEL,    ///< A separator, name, ExMx or MAPxx
  LUMP_THINGS,   ///< Monsters, items..
  LUMP_LINEDEFS, ///< LineDefs, from editing
  LUMP_SIDEDEFS, ///< SideDefs, from editing
  LUMP_VERTEXES, ///< Vertices, edited and BSP splits generated
  LUMP_SEGS,     ///< LineSegs, from LineDefs split by BSP
  LUMP_SSECTORS, ///< SubSectors, list of LineSegs
  LUMP_NODES,    ///< BSP nodes
  LUMP_SECTORS,  ///< Sectors, from editing
  LUMP_REJECT,   ///< LUT, sector-sector visibility        
  LUMP_BLOCKMAP, ///< LUT, motion clipping, walls/grid element
  LUMP_BEHAVIOR  ///< Hexen ACS script lump
};



/// \brief A single Vertex.
struct mapvertex_t
{
  short  x, y;
} __attribute__((packed));



/// \brief SideDef, defining the visual appearance of a wall, by setting textures and offsets.
struct mapsidedef_t
{
  short         textureoffset;
  short         rowoffset;
  char          toptexture[8];
  char          bottomtexture[8];
  char          midtexture[8];
  short         sector;  // Front sector, towards viewer.
} __attribute__((packed));



/// \brief LineDef, a border between sectors. Used as input to the BSP builder.
struct doom_maplinedef_t
{
  short v1, v2;
  short flags;
  short special;
  short tag;
  /// sidenum[1] will be -1 if one sided
  short sidenum[2];             
} __attribute__((packed));



/// \brief The Hexen LineDef type.
struct hex_maplinedef_t
{
  short v1, v2;
  short flags;
  byte special;
  byte args[5];
  short sidenum[2]; // sidenum[1] will be -1 if one sided
} __attribute__((packed));



/// \brief Sector definition, from editing.
struct mapsector_t
{
  short         floorheight;
  short         ceilingheight;
  char          floorpic[8];
  char          ceilingpic[8];
  short         lightlevel;
  short         special;
  short         tag;
} __attribute__((packed));



/// \brief SubSector, as generated by BSP.
struct mapsubsector_t
{
  short  numsegs;
  short  firstseg; // Index of first one, segs are stored sequentially.
} __attribute__((packed));



/// \brief LineSeg, generated by splitting LineDefs
/// using partition lines selected by BSP builder.
struct mapseg_t
{
  short  v1, v2;
  short  angle;          
  short  linedef;
  short  side;
  short  offset;
} __attribute__((packed));



/// \brief BSP node
struct mapnode_t
{
  /// Partition line from (x,y) to x+dx,y+dy)
  short  x, y;
  short  dx, dy;

  /// Bounding box for each child, clip against view frustum.
  short  bbox[2][4];

  /// If NF_SUBSECTOR its a subsector, else it's a node of another subtree.
  unsigned short children[2];
} __attribute__((packed));



/// \brief Thing definition. Position, orientation and type,
/// plus skill/visibility flags and attributes.
struct doom_mapthing_t
{
  short x, y;
  short angle;
  short type;
  short flags;
} __attribute__((packed));



/// \brief Hexen Thing
struct hex_mapthing_t
{
  short tid;
  short x, y;
  short height;
  short angle;
  short type;
  short flags;
  byte special;
  byte args[5];
} __attribute__((packed));




//===========================================================
//   Not directly map-related data
//===========================================================

/// \brief A DoomTexture patch constituent.
///
/// Each texture is composed of one or more patches,
/// with patches being lumps stored in the WAD.
/// The lumps are referenced by number, and patched
/// into the rectangular texture space using origin
/// and possibly other attributes.
struct mappatch_t
{
  short       originx;
  short       originy;
  short       patch;
  short       stepdir;  ///< always 1
  short       colormap; ///< always 0
} __attribute__((packed));



/// \brief A DoomTexture definition in a TEXTUREx lump.
///
/// A Doom wall texture is a list of patches
/// which are to be combined in a predefined order.
struct maptexture_t
{
  char        name[8];
  short       flags;          // extension, used to be zero
  byte        xscale, yscale; // extension, used to be zero
  short       width;
  short       height;
  void      **columndirectory; // unused, always zero
  short       patchcount;
  mappatch_t  patches[1];
} __attribute__((packed));



/// \brief Header for Doom native sound format.
///
/// First a 8-byte header composed of 4 unsigned (16-bit) short integers (LE/BE ?),
/// then the data (8-bit 11 kHz mono sound).
/// Max. # of samples = 65535 = about 6 seconds of sound.
struct doomsfx_t
{
  unsigned short magic;   ///< always 3
  unsigned short rate;    ///< always 11025
  unsigned short samples; ///< number of 1-byte samples
  unsigned short zero;    ///< always 0
  byte data[0]; // actual data begins here
} __attribute__((packed));



/// \brief Template for the Boom ANIMATED lump.
///
/// Used for defining texture and flat animation sequences.
struct ANIMATED_t
{
  char  istexture;   ///< 0 means flat, -1 is a terminator
  char  endname[9];
  char  startname[9];
  int   speed;
} __attribute__((packed));



/// \brief Template for the Boom SWITCHES lump.
struct SWITCHES_t
{
  char   name1[9];
  char   name2[9];
  short  episode;
} __attribute__((packed));


#endif
